/*! http://responsiveslides.com v1.53 by @viljamis */
(function ($, window, i) {
    $.fn.responsiveSlides = function (options) {
        // Default settings
        var settings = $.extend({
            auto: true,
            speed: 500,
            timeout: 4000,
            pager: false,
            nav: false,
            random: false,
            pause: false,
            pauseControls: true,
            prevText: "Previous",
            nextText: "Next",
            maxwidth: "",
            navContainer: "",
            manualControls: "",
            namespace: "rslides",
            before: $.noop,
            after: $.noop
        }, options);

        return this.each(function () {
            i++;
            var $this = $(this),
                index = 0,
                $slides = $this.children(),
                slideCount = $slides.size(),
                fadeTime = parseFloat(settings.speed),
                waitTime = parseFloat(settings.timeout),
                maxw = parseFloat(settings.maxwidth),
                namespace = settings.namespace,
                namespaceIdx = namespace + i,
                navClass = namespace + "_nav " + namespaceIdx + "_nav",
                activeClass = namespace + "_here",
                visibleClass = namespaceIdx + "_on",
                slideClassPrefix = namespaceIdx + "_s",
                $pager = $("<ul class='" + namespace + "_tabs " + namespaceIdx + "_tabs' />"),
                visible = { "float": "left", "position": "relative", "opacity": 1, "zIndex": 2 },
                hidden = { "float": "none", "position": "absolute", "opacity": 0, "zIndex": 1 },
                supportsTransitions = (function () {
                    var b = (document.body || document.documentElement).style,
                        s = "transition";
                    if (typeof b[s] === "string") { return true; }
                    var v = ["Moz", "Webkit", "Khtml", "O", "ms"],
                        s = s.charAt(0).toUpperCase() + s.substr(1);
                    for (var i = 0; i < v.length; i++) {
                        if (typeof b[v[i] + s] === "string") { return true; }
                    }
                    return false;
                })();

            // Randomize slides
            if (settings.random) {
                $slides.sort(function () { return Math.round(Math.random()) - 0.5; });
                $this.empty().append($slides);
            }

            // Add ID to each slide
            $slides.each(function (i) {
                this.id = slideClassPrefix + i;
            });

            $this.addClass(namespace + " " + namespaceIdx);
            options && options.maxwidth && $this.css("max-width", maxw);
            $slides.hide().css(hidden).eq(0).addClass(visibleClass).css(visible).show();

            // CSS transitions
            if (supportsTransitions) {
                $slides.show().css({
                    "-webkit-transition": "opacity " + fadeTime + "ms ease-in-out",
                    "-moz-transition": "opacity " + fadeTime + "ms ease-in-out",
                    "-o-transition": "opacity " + fadeTime + "ms ease-in-out",
                    "transition": "opacity " + fadeTime + "ms ease-in-out"
                });
            }

            // Pager
            if (settings.pager && !settings.manualControls) {
                var pagerMarkup = [];
                $slides.each(function (i) {
                    i += 1;
                    pagerMarkup += "<li><a href='#' class='" + slideClassPrefix + i + "'>" + i + "</a></li>";
                });
                $pager.append(pagerMarkup);
                options.navContainer ? $(settings.navContainer).append($pager) : $this.after($pager);
            }

            // Manual controls
            if (settings.manualControls) {
                $pager = $(settings.manualControls);
                $pager.addClass(namespace + "_tabs " + namespaceIdx + "_tabs");
            }

            // Add pager class
            if (settings.pager || settings.manualControls) {
                $pager.find("li").each(function (i) {
                    $(this).addClass(slideClassPrefix + (i + 1));
                });
            }

            // Pager click event
            if (settings.pager || settings.manualControls) {
                var $pagerLinks = $pager.find("a");
                var updatePager = function (index) {
                    $pagerLinks.closest("li").removeClass(activeClass).eq(index).addClass(activeClass);
                };
            }

            // Auto play
            if (settings.auto) {
                var startCycle = function () {
                    play = setInterval(function () {
                        $slides.stop(true, true);
                        var idx = index + 1 < slideCount ? index + 1 : 0;
                        (settings.pager || settings.manualControls) && updatePager(idx);
                        slideTo(idx);
                    }, waitTime);
                };
                startCycle();
            }

            // Pause on hover
            if (settings.pause) {
                $this.hover(function () {
                    clearInterval(play);
                }, function () {
                    startCycle();
                });
            }

            // Pager click event
            if (settings.pager || settings.manualControls) {
                $pagerLinks.bind("click", function (e) {
                    e.preventDefault();
                    settings.pauseControls || startCycle();
                    var idx = $pagerLinks.index(this);
                    if (index !== idx && !$("." + visibleClass).queue("fx").length) {
                        updatePager(idx);
                        slideTo(idx);
                    }
                }).eq(0).closest("li").addClass(activeClass);

                if (settings.pauseControls) {
                    $pagerLinks.hover(function () {
                        clearInterval(play);
                    }, function () {
                        startCycle();
                    });
                }
            }

            // Navigation
            if (settings.nav) {
                var navMarkup = "<a href='#' class='" + navClass + " prev'>" + settings.prevText + "</a><a href='#' class='" + navClass + " next'>" + settings.nextText + "</a>";
                options.navContainer ? $(settings.navContainer).append(navMarkup) : $this.after(navMarkup);
                var $nav = $("." + namespaceIdx + "_nav"),
                    $prev = $nav.filter(".prev");

                $nav.bind("click", function (e) {
                    e.preventDefault();
                    var $visibleSlide = $("." + visibleClass);
                    if (!$visibleSlide.queue("fx").length) {
                        var idx = $slides.index($visibleSlide);
                        var prevIdx = idx - 1;
                        var nextIdx = idx + 1 < slideCount ? index + 1 : 0;
                        slideTo($(this)[0] === $prev[0] ? prevIdx : nextIdx);
                        (settings.pager || settings.manualControls) && updatePager($(this)[0] === $prev[0] ? prevIdx : nextIdx);
                        settings.pauseControls || startCycle();
                    }
                });

                if (settings.pauseControls) {
                    $nav.hover(function () {
                        clearInterval(play);
                    }, function () {
                        startCycle();
                    });
                }
            }

            // Max width
            if (typeof document.body.style.maxWidth === "undefined" && options.maxwidth) {
                var adjustMaxWidth = function () {
                    $this.css("width", "100%");
                    $this.width() > maxw && $this.css("width", maxw);
                };
                adjustMaxWidth();
                $(window).bind("resize", function () {
                    adjustMaxWidth();
                });
            }

            // Slide to function
            var slideTo = function (idx) {
                settings.before();
                if (supportsTransitions) {
                    $slides.removeClass(visibleClass).css(hidden).eq(idx).addClass(visibleClass).css(visible);
                    index = idx;
                    setTimeout(function () {
                        settings.after();
                    }, fadeTime);
                } else {
                    $slides.stop().fadeOut(fadeTime, function () {
                        $(this).removeClass(visibleClass).css(hidden).css("opacity", 1);
                    }).eq(idx).fadeIn(fadeTime, function () {
                        $(this).addClass(visibleClass).css(visible);
                        settings.after();
                        index = idx;
                    });
                }
            };
        });
    };
})(jQuery, this, 0);